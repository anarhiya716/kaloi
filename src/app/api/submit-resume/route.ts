import { NextResponse } from 'next/server';
import { Telegram } from '@/lib/telegram';

export const dynamic = 'force-dynamic';

export async function POST(request: Request) {
  try {
    const contentType = request.headers.get('content-type');

    if (contentType?.includes('application/json')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
      const { name, telegram, message } = await request.json();

      const text = `
üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
üë§ –ò–º—è: ${name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üí¨ Telegram: ${telegram || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
      `.trim();

      await Telegram.sendMessage(text);
      return NextResponse.json({ success: true });
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã "–†–µ–∑—é–º–µ"
      const formData = await request.formData();
      const requiredFields = ['name', 'telegram', 'phone', 'position', 'experience'];

      for (const field of requiredFields) {
        if (!formData.get(field)) {
          return NextResponse.json(
            { error: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è` },
            { status: 400 }
          );
        }
      }

      const message = `
üéØ –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ!
üë§ –ò–º—è: ${formData.get('name')}
üìß Telegram: ${formData.get('telegram')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.get('phone')}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${formData.get('position')}
‚è≥ –û–ø—ã—Ç: ${formData.get('experience')}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.get('message') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
      `.trim();

      await Telegram.sendMessage(message);
      return NextResponse.json({ success: true });
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
      { status: 500 }
    );
  }
}
